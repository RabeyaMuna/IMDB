c
expect(assigns(:recent_released)).to eq([post_1, post_2])
[post_1, post_2]
assigns(:recent_released)
expect(assigns(:recent_released)).to eq([post_1, post_2])
[post_1, post_2]
c
delete_action
expect { delete_action }.not_to change(Post, :count)
delete_action
c
it { is_expected.to respond_with(:success) }
it { is_expected.to render_template(:new) }
before { get :new }
fore { get :new }
render_template(:new)
is_expected.to render_template(:new)
c
 expect(assigns(:recent_released)).to eq([post_1, post_2])
assigns(:recent_released)
[post_2, post_1]
assigns(:recent_released)
c
expect(assigns(:recent_released)).to eq([post_2, post_1])
[post_2, post_1]
assigns(:recent_released)
clear
assigns(:recent_released))
c
expect(assigns(:recent_released)).to eq([post_2, post_1])
[post_2, post_1]
assigns(:recent_released)
c
[post_2, post_1]
assigns(:latest_collection)
c
[post_1, post_2]
assigns(:latest_collection)
latest_collection
c
current_user
@user
c
@post.post_reports
c
@post.post_reports
c
@post.post_reports
c
@post.destroy!
@post
@post.destroy!
c
@post.destroy!
@post
Post.find(params[:id])
params
c
current_user.admin?
current_user.admin
current_user
c
params[:q]
Post.ransack(params[:q])
c
Post.ransack(params[:search]["search_text"])
q
params[:search]["search_text"]
params[:search]
params[:search_text]
params[:q]
params
c
@posts.size.zero
@posts.size
@posts.nil
@posts
@posts.size
c
PostRating.find_by(post_id: @post.id, user_id: current_user.id)
@post_rating = @post.post_ratings.find_by(user_id: current_user.id)
@post.post_ratings.find_by(user_id: current_user.id)
@post_rating
exsisting_post_rating.assign_attributes(post_rating_params)
post_rating_params
exsisting_post_rating
c
self.post_ratings.sum(:rating)/self.post_ratings.count
self.post_ratings.sum(:rating)
self.post_ratings.count
c
<% post.score %>
post.score
c
post.score.to_i.times
post.score
c
<i class="bi bi-star"></i>
post.score.to_i
post.score
c
@post.director_name.split(',')
@post.director_name
c
@post.cast_name.to_sentence
@post.cast_name.extract!('[')
@post.cast_name.extract!('[',']')
@post.cast_name.extract('[',']')
@post.cast_name
c
@post.save
post_params["director_name"].split(',')
post_params["director_name"].split
post_params["director_name"]
post_params
c
post_params
c
post_params
c
self.save
link.save
link
c
link
self.link = post_path(self)
 post_path(self)
Rails.url
book_path(self)
self.link
self
c
mail(from: sender_mail, to: 'admin@gmail.com', subject: "You got a Report from user regarding content!")
c
@post_url
@post_reporter_name
@post_report.user.name
c
mail(from: sender_mail, to: 'admin@gmail.com', subject: "You got a Report from user regarding content!")
c
mail(from: sender_mail, to: 'admin@gmail.com', subject: "You got a Report from user regarding content!")
PostReportMailer.new_post_report_email
PostReportMailer
PostReportMailer.new_post_report_email
mail(from: sender_mail, to: 'admin@gmail.com', subject: "You got a Report from user regarding content!")
c
mail(from: sender_mail, to: 'admin@gmail.com', subject: "You got a Report from user regarding content!")
sender_mail
c
 mail(from: sender_mail, to: 'admin@gmail.com', subject: "You got a Report from user regarding content!")
c
 mail(from: sender_mail, to: 'admin@gmail.com', subject: "You got a Report from user regarding content!")
mail(from: sender_mail, to: 'admin@gmail.com', subject: "You got a Report from #{current_user.name} regarding content!")
c
current_user
mail(from: "#{current_user.email}", to: 'admin@gmail.com', subject: "You got a Report from #{current_user.name} regarding content!")
c
params
post_report
post
c
params[:post]
params
c
params
c
params
c
params[:post_report]
params[:post]
params
c
post_params
 @post
c
post_params
c
Comment.find_by(id: 1).destroy
Comment.find_by(id: 1)
Comment.find_by(id: @comment.id)
@post.comments.find(params[:id])
@post
c
params
@post.comments.find_by(id: params[:id]).destroy!
@post.comments.find(params[:id]).first.destroy!
@post.comments.find(params[:id]).destroy!
@post.comments.find(params[:id]).destroy
@post.comments.find(params[:id])
c
@post.comments.find(params[:id])
@post.comments.find(params[:id]).destroy!
@post.comments.find(params[:id]).destroy!.error
@post.comments.find(params[:id]).destroy!
@post.comments.find(params[:id]).destroy.error_message
@post.comments.find(params[:id])
@post.comments.find(params[:id]).destroy
@post.comments.find(params[:id])
c
@comment.destroy!
@comment = @post.comments.find(params[:id])
@post.comments.find(params[:id])
params
c
params
c
Post.find_by(id: params[:id])
params
c
self.object.trailer
self.object
self.trailer
self
object
c
params
params[:id]
c
@posts.all.each
@posts.each
@posts.all.each
@posts.all
@post
@posts
c
Post.where(category: params[:category]).order(created_at: :desc)
    else
params[:category].present?
params[:category]
params
c
Post.where(category: params[:id])
params[:id]
c
params
c
params[:id]
params
c
user
c
user
c
user
c
post
user
c
it { is_expected.to validate_content_type_of(:avatar).allowing('image/jpg', 'image/jpeg', 'image/png') }
it { is_expected.to validate_presence_of(:password) }
it { is_expected.to validate_presence_of(:email) }
it { is_expected.to validate_presence_of(:name) }
c
 it { is_expected.to validate_presence_of(:name) }
it { is_expected.to have_many(:posts).dependent(:destroy) }
expect(user).to be_valid
